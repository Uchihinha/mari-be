// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  User
  Admin
}

enum PlanFrequency {
  YEARLY
  MONTHLY
}

enum WebsiteStatus {
  ACTIVE
  DISABLED
}

enum StripeSubscriptionStatus {
  active
  canceled
  incomplete
  incomplete_expired
  past_due
  trialing
  unpaid
}

enum AssetType {
  IMAGE
  PAGE
}

model TemplateCategory {
  id        Int        @id @default(autoincrement())
  name      String
  templates Template[]
}

model Website {
  id     Int           @id @default(autoincrement())
  title  String
  domain String        @unique
  html   String?       @db.Text
  css    String?       @db.Text
  user   User          @relation(fields: [userId], references: [id])
  userId Int
  status WebsiteStatus
}

model UserTemplate {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  template   Template @relation(fields: [templateId], references: [id])
  templateId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model User {
  id                   Int                @id @default(autoincrement())
  name                 String
  email                String             @unique
  password             String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  role                 Role               @default(User)
  userTemplate         UserTemplate[]
  website              Website[]
  plan                 Plan?              @relation(fields: [planId], references: [id])
  planId               Int?
  stripeSubscriptionId String?
  stripeCustomerId     String?
  passwordResets       PasswordReset[]
  Asset                Asset[]
  UserSubscription     UserSubscription[]
}

model UserSubscription {
  id Int @id @default(autoincrement())

  user                 User                     @relation(fields: [userId], references: [id])
  userId               Int
  status               StripeSubscriptionStatus
  stripeSubscriptionId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, stripeSubscriptionId])
}

model Plan {
  id Int @id @default(autoincrement())

  name          String @unique
  stripePriceId String
  price         Float
  recurrence    String

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  planBenefits PlanBenefit[]
  users        User[]
}

model PlanBenefit {
  id Int @id @default(autoincrement())

  planId Int
  plan   Plan @relation(fields: [planId], references: [id])

  key   String
  value String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Template {
  id              Int              @id @default(autoincrement())
  title           String
  description     String
  html            String           @db.Text
  css             String           @db.Text
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  UserTemplate    UserTemplate[]
  category        TemplateCategory @relation(fields: [categoryId], references: [id])
  categoryId      Int
  templatePreview String
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  token     String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
}

model Asset {
  id     Int       @id @default(autoincrement())
  url    String
  user   User      @relation(fields: [userId], references: [id])
  userId Int
  type   AssetType
}

model TutorialVideos {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  url         String
  thumbnail   String
}
